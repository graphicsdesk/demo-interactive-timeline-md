{"version":3,"sources":["scripts/script_calendar.js"],"names":["width","height","vbWidth","vbHeight","viewBox","vbMinX","vbMinY","main","d3","select","scrolly","sticky","article","step","selectAll","monthNames","daysOfWeek","events","date","Date","event_no","label","segment","annotation","target","link","document","body","clientWidth","window","innerHeight","svg","attr","style","cellSize","Math","min","wrap","text","each","word","words","split","reverse","line","lineNumber","x","y","tspan","append","dy","pop","push","join","node","getComputedTextLength","makeCalendar","month","year","firstDay","getDay","daysInMonth","getDate","console","log","calendarGroup","classed","data","enter","d","i","eventDays","Set","filter","event","getUTCMonth","getUTCFullYear","map","getUTCDate","range","floor","forEach","day","months","currentMonthIndex","scroller","scrollama","handleStepEnter","response","direction","stepFunctionsDown","index","stepFunctionsUp","handleStepExit","transitionToMonth","setupCalendars","remove","addAnnotation","targetDate","message","monthIndex","getTotalLength","transition","duration","on","call","setup","highlightDateRange","length","transitionToMonthUp","steps","init","offset","debug","onStepEnter","onStepExit","addEventListener","resize","id","startDate","endDate","currentDate","dayCellId","setUTCDate","newMonthIndex","currentCalendar","newCalendar","verticalOffset"],"mappings":"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","file":"script_calendar.027d29ae.js","sourceRoot":"../src","sourcesContent":["let width, height;\nlet vbWidth, vbHeight;\nconst vbMinX = 0;\nconst vbMinY = 0;\nlet viewBox;\n\n  // using d3 for convenience\n  var main = d3.select('main');\n  var scrolly = main.select('#scrolly');\n  var sticky = scrolly.select('#sticky-thing');\n  var article = scrolly.select('article');\n  var step = article.selectAll('.step');\n  \n\n\n\n\n    const monthNames = [\n        'January', 'February', 'March', 'April', 'May', 'June',\n        'July', 'August', 'September', 'October', 'November', 'December'\n    ];\n    const daysOfWeek = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n\n    const events = [\n        {date: new Date('2024-08-25'), event_no: '1', label: 'First day of NSOP', segment: 'start',  annotation: \"Barnard starts NSOP here\", target:  new Date(2024, 7, 28)},\n        {date: new Date('2024-09-01'), event_no: '2', label: 'End of NSOP', segment: 'end'},\n        {date: new Date('2024-09-03'), event_no: '3', label: 'First day of class', segment: 'start', link: 'https://cloudfront-us-east-1.images.arcpublishing.com/spectator/SXKBMSVSGRG33IB2XATXOLRLD4.png'},\n        {date: new Date('2024-09-13'), event_no: '4', label: 'End of shopping period', segment: 'end', link: 'https://cloudfront-us-east-1.images.arcpublishing.com/spectator/BKWCFTETX5D3XFUR2KICPMFP4E.png'},\n        {date: new Date('2024-10-08'), event_no: '5', label: 'Last day to drop classes', segment: 'na'},\n        {date: new Date('2024-10-17'), event_no: '6', label: 'Fall midterm date', segment: 'na', link: 'https://cloudfront-us-east-1.images.arcpublishing.com/spectator/WBKEKOAX3BED3LR7466RLHXJKY.png'},\n        {date: new Date('2024-10-26'), event_no: '7', label: 'Homecoming game', segment: 'na', link: 'https://cloudfront-us-east-1.images.arcpublishing.com/spectator/MOBF27JBSRCKHNWURS4M24G2T4.png'},\n        {date: new Date('2024-11-04'), event_no: '8', label: 'Start of election holiday', segment: 'start', link: 'https://cloudfront-us-east-1.images.arcpublishing.com/spectator/DQGZ4DEU4NGK5APJB4KP3MENY4.png'},\n        {date: new Date('2024-11-05'), event_no: '9', label: 'End of election holiday', segment: 'end'},\n        {date: new Date('2024-11-14'), event_no: '10', label: 'Last day to withdraw/PDF', segment: 'na', annotation: \"Also the last day to drop classes for SEAS students\", target:  new Date(2024, 10, 15)},// for some reason, this only works if i say the 15th. idk why\n        {date: new Date('2024-11-18'), event_no: '11', label: 'Start registration', segment: 'start'},\n        {date: new Date('2024-11-22'), event_no: '12', label: 'End registration', segment: 'end'},\n        {date: new Date('2024-11-27'), event_no: '13', label: 'Start of Thanksgiving break', segment: 'start', link: 'https://cloudfront-us-east-1.images.arcpublishing.com/spectator/IYOOWB5KB5BXJKSKIMHAZIVWNA.png'},\n        {date: new Date('2024-11-29'), event_no: '14', label: 'End of Thanksgiving break', segment: 'end'},\n        {date: new Date('2024-12-09'), event_no: '15', label: 'Last day of class', segment: 'na', link: 'https://cloudfront-us-east-1.images.arcpublishing.com/spectator/Y256NHNJ6FFSZLZ2ZULRUQI3DE.png'},\n        {date: new Date('2024-12-10'), event_no: '16', label: 'Start of reading period', segment: 'start', link: 'https://cloudfront-us-east-1.images.arcpublishing.com/spectator/YUYOAPVRPFHIRFQ75CTARUZVNE.png'},\n        {date: new Date('2024-12-12'), event_no: '17', label: 'End of reading period', segment: 'end'},\n        {date: new Date('2024-12-13'), event_no: '18', label: 'Start of finals', segment: 'start'},\n        {date: new Date('2024-12-20'), event_no: '19', label: 'End of finals', segment: 'end'}\n    ];\n    width = document.body.clientWidth;\n    height = window.innerHeight;\n\n   // Create the SVG container\nconst svg = d3.select('svg')\n.attr('width', width)\n.attr('height', height)\n.style(\"display\", \"block\")\n.style(\"margin\", \"auto\")\n.attr('viewBox', `0 0 ${width} ${height}`);\n\nconst cellSize = Math.min(width / 7, height / 8); // Adjust cell size based on container\n\n // function for text wrapping\n    function wrap(text, width) {\n      text.each(function () {\n          var text = d3.select(this),\n              words = text.text().split(/\\s+/).reverse(),\n              word,\n              line = [],\n              lineNumber = 0,\n              lineHeight = 1.1, // ems\n              x = text.attr(\"x\"),\n              y = text.attr(\"y\"),\n              dy = 0, //parseFloat(text.attr(\"dy\")),\n              tspan = text.text(null)\n                          .append(\"tspan\")\n                          .attr(\"x\", x)\n                          .attr(\"y\", y)\n                          .attr(\"dy\", dy + \"em\");\n          while (word = words.pop()) {\n              line.push(word);\n              tspan.text(line.join(\" \"));\n              if (tspan.node().getComputedTextLength() > width) {\n                  line.pop();\n                  tspan.text(line.join(\" \"));\n                  line = [word];\n                  tspan = text.append(\"tspan\")\n                              .attr(\"x\", x)\n                              .attr(\"y\", y)\n                              .attr(\"dy\", ++lineNumber * lineHeight + dy + \"em\")\n                              .text(word);\n              }\n          }\n      });\n  }\nfunction makeCalendar(month,year) {\n  const firstDay = new Date(year, month, 1).getDay(); // Day of the week for the 1st of the month\nconst daysInMonth = new Date(year, month + 1, 0).getDate(); // Number of days in the month\n\nconsole.log(firstDay);\n\nconst calendarGroup = svg.append('g') // Append a new group for each month's calendar\n    .attr('class', `calendar-month-${month}`)\n    .attr('transform', `translate(${width}, 0)`); // Start off-screen\n\n\n   \n  \n\n// Add day cells with boxes\n\nconsole.log(width);\nconsole.log(cellSize);\nconsole.log((width-(cellSize*7))/7);\nconsole.log(width%cellSize);\n\n\n // Add month label\n calendarGroup.append(\"text\")\n .attr(\"x\", width / 2)\n .attr(\"y\", cellSize / 2)\n .attr(\"text-anchor\", \"middle\")\n .text(monthNames[month] + \" \" + year)\n .style(\"font-weight\", \"bold\")\n .style(\"font-size\", \"16px\")\n .classed('roboto-bold', true);\n\n// Add day headers\ncalendarGroup.selectAll(\".header\")\n .data(daysOfWeek)\n .enter().append(\"text\")\n .attr(\"x\", (d, i) => i * cellSize + cellSize / 2 + (width-(cellSize*7))/2)\n .attr(\"y\", cellSize )\n .attr(\"text-anchor\", \"middle\")\n .text(d => d)\n .classed('roboto',true)\n //.style(\"font-weight\", \"bold\");\n\n // Create a set of days that have events\n const eventDays = new Set(events\n  .filter(event => event.date.getUTCMonth() === month && event.date.getUTCFullYear() === year)\n  .map(event => event.date.getUTCDate())\n);\n\nconsole.log(eventDays);\n\n\ncalendarGroup.selectAll(\"rect\")\n.data(d3.range(daysInMonth))\n.enter().append(\"rect\")\n.attr(\"x\", (d, i) => ((i + firstDay) % 7) * cellSize + (width-(cellSize*7))/2)\n.attr(\"y\", d => Math.floor((d + firstDay) / 7) * cellSize + cellSize + 20)\n.attr(\"width\", cellSize)\n.attr(\"height\", cellSize)\n.attr(\"fill\", \"#fff\")\n.attr(\"stroke\", \"#ddd\")\n.attr('id', d => `day-${month + 1}-${d + 1}`);\n\n\n\n\ncalendarGroup.selectAll(\".day\")\n          .data(d3.range(daysInMonth))\n          .enter().append(\"text\")\n          .attr(\"x\", (d, i) => ((i + firstDay) % 7) * cellSize + cellSize / 2 + (width-(cellSize*7))/2)\n          .attr(\"y\", d => Math.floor((d + firstDay) / 7) * cellSize + cellSize + 35)\n          .attr(\"text-anchor\", \"middle\")\n          .classed('roboto-light',true)\n          .text(d => d + 1)\n          .style(\"font-size\", \"14px\");\n\n// Highlight events\nevents.forEach(event => {\n  if (event.date.getUTCMonth() === month && event.date.getUTCFullYear() === year) {\n      const day = event.date.getUTCDate();\n      const x = ((day + firstDay - 1) % 7) * cellSize + cellSize / 2 + (width-(cellSize*7))/2;\n      const y = Math.floor((day + firstDay - 1) / 7) * cellSize + cellSize +  cellSize*.8;\n\n      \n\n      /*\n      svg.select(`#day-${day}`)\n      .classed('filled-square', true); // Add a class to highlight the square\n\n      */\n\n      /*\n      svg.select(`#day-${day}`)\n      .classed(`event-${day}`, true); // Add a class to highlight the square\n      */\n\n\n      if (event.link) {\n        calendarGroup.append(\"image\")\n              .attr(\"xlink:href\", event.link)\n              .attr(\"x\", x - (cellSize/2))\n              .attr(\"y\", y - (cellSize/2))\n              .attr(\"width\", (cellSize))\n              .attr(\"height\", (cellSize))\n              .attr('id', (d,i) => `image-${i}`);\n      }\n  }\n});\n\n\n\n}\n\nconst months = [7,8, 9, 10, 11]; // August to December\nconst year = 2024;\n\n\nlet currentMonthIndex = months[0];\n// scrolly stuff\n\nvar scroller = scrollama();\n\n  \n    \n    function handleStepEnter(response) {\n        if(response.direction=='down') {\n             // Call the appropriate step function based on the scroll index\n        stepFunctionsDown[response.index]();\n        }\n        else if(response.direction=='up') {\n            stepFunctionsUp[response.index]();\n        }\n        // Update the sticky element's class\n        sticky.attr('class', 'step-' + response.index);\n        console.log('index',response.index);\n        return response;\n       \n    }\n    \n    function handleStepExit(response) {\n        if (response.index == 0 && response.direction == 'up') {\n         \n           // Initially display the first month\n      transitionToMonth(months[0]);\n\n        }\n    }\n\n    function setupCalendars() {\n      svg.selectAll(\".calendar-month\").remove(); \n\n      // Create calendars for all months\n      months.forEach((month) => {\n        makeCalendar(month, year);\n      });\n    \n      // Ensure the first month is visible initially\n      transitionToMonth(months[0]);\n\n      \n\n      \n    }\n\n    // stuff for making arrowhead\n    svg.append('defs')\n.append('marker')\n    .attr('id', 'arrowhead')\n    .attr('viewBox', '0 0 10 10')\n    .attr('refX', 9) // Adjust this as needed\n    .attr('refY', 5)\n    .attr('markerWidth', 5)\n    .attr('markerHeight', 5)\n    .attr('orient', 'auto-start-reverse')\n    .append('path')\n    .attr('d', 'M 0 0 L 10 5 L 0 10 z') // Arrowhead shape\n    .attr('fill', 'black');\n\n\n    function addAnnotation(targetDate,message) {\n     // const targetDate = new Date(2024, 7, 28); // August is month 7\n      const day = targetDate.getUTCDate();\n      const monthIndex = targetDate.getUTCMonth();\n      \n      // Get the calendar group for the month of August\n      const calendarGroup = svg.select(`.calendar-month-${monthIndex}`);\n      \n      // Calculate position\n      const x = ((day + 2) % 7) * cellSize + cellSize / 2 + (width - (cellSize * 7)) / 2;\n      const y = Math.floor((day + 1 + 0) / 7) * cellSize + cellSize + cellSize/2;\n      \n      // Add curved arrow\n      calendarGroup.append(\"path\")\n          .attr(\"d\", `M${x+cellSize/4} ${y-cellSize/2} Q${x + cellSize/1.7} ${y + cellSize/2} ${x + cellSize} ${y}`)\n          .attr(\"fill\", \"none\")\n          .attr(\"stroke\", \"black\")\n          .attr(\"stroke-width\", 2)\n          .classed('annotation-arrow',true)\n          .style('opacity','100')\n          .classed('annotation',true)\n    \n          .attr(\"stroke-dasharray\", function() {\n            return this.getTotalLength(); // Set the dash array to the length of the path\n        })\n        .attr(\"stroke-dashoffset\", function() {\n            return this.getTotalLength(); // Initially hide the path\n        })\n        .transition()\n        .duration(1000)  // Duration of the drawing effect\n        .attr(\"stroke-dashoffset\", 0)\n        .on(\"end\", function() {\n          calendarGroup.selectAll('.annotation-arrow').attr('marker-end', 'url(#arrowhead)')\n        });  // Draw the path;\n          \n      \n      // Add text\n      calendarGroup.append(\"text\")\n          .attr(\"x\",x+cellSize/8)\n          .attr(\"y\", y-cellSize/1.6)\n          .text(`${message}`)\n          .style('opacity','100')\n          .style(\"font-size\", \"14px\")\n          .attr('text-anchor','middle')\n          .style(\"fill\", \"black\")\n          .classed('annotation',true)\n          .classed('roboto',true)\n          .call(wrap,cellSize*3)\n        ;\n  }\n\n    function setup() {\n      setupCalendars();\n\n      // Initially display the first month\n      transitionToMonth(months[0]);\n     \n\n      //makeCalendar(months[0], year);\n      //  d3.selectAll('#sticky-thing').classed('hidden',true);\n     //   svg.selectAll(\"circle\").classed('hidden', true,); \n     //   svg.selectAll(\".line\").classed('hidden', false,); \n     //   svg.selectAll(\"image\").classed('hidden', true,); \n\n     //   svg.selectAll(\"svg\").classed('draw', false,); \n      \n    }\n\n    function setupCalendars() {\n      svg.selectAll(\".calendar-month\").remove(); // Clear existing calendars if any\n      months.forEach(month => makeCalendar(month, year));\n      transitionToMonth(months[0]);\n    }\n\n    \n  \n\n    // populate stepFunctions\n    var stepFunctionsDown = [\n        \n        \n      ];\n\n      for (let i =0; i < events.length+2;i++) {\n       \n        stepFunctionsDown.push(function() {\n\n          const monthIndex = events[i].date.getUTCMonth(); // 0-based index\n  transitionToMonth(monthIndex);\n\n          svg.select(`.event-${i}`)\n          .transition()\n          .duration(1000)\n          .style('fill','#75aadb')\n\n          \n          /*\n          svg.select(`.event-${i}`)\n          .classed('filled-square', true); // Add a class to highlight the square\n*/\n\n\n  \n\n\nif(events[i].segment !== 'end') { \n  svg.selectAll(`.event-${i-1}`).transition()\n    .duration(1000)\n    .style('fill','white');\n    svg.selectAll(`.event-${i-2}`).transition()\n    .duration(1000)\n    .style('fill','white');\n  }\n          if(events[i].segment == 'start') {\n            \n            const startDate = events[i].date;\n            const endDate = events[i+1].date;\n\n            \n           highlightDateRange(startDate, endDate);\n\n       \n       \n              }\n\n\n  if(events[i].annotation) {\n    const targetDate = events[i].target;\n    const message = events[i].annotation;\n    \n  \n    addAnnotation(targetDate,message);\n\n  }\n       \n\n\n          /*\n          svg.select(`#day-${i}`)\n      .classed('filled-square', true); // Add a class to highlight the square\n        */\n\n      \n \n      \n          });\n          \n      }\n\n    \n\n  \nvar stepFunctionsUp = [\n        \n        \n];\n\n\n\n\n\n\nfor (let i =0; i < events.length;i++) {\n  stepFunctionsUp.push(function() { // NEED TO GIGURE OUT WHY IT DOESNT SHOW LAST EVENT\n   \n    svg.selectAll('.annotation') \n    .transition()\n    .duration(1000)\n    .style('opacity','0')\n    \n    svg.select(`.event-${i}`)\n    .transition()\n    .duration(1000)\n    .style('fill','#75aadb')\n\n\n    if(events[i].segment == 'start') {\n                \n      const startDate = events[i].date;\n      const endDate = events[i+1].date;\n\n      \n     highlightDateRange(startDate, endDate);\n\n \n \n        }\n\n\n    const monthIndex = events[i].date.getUTCMonth(); // 0-based index\n    transitionToMonthUp(monthIndex);\n    });\n\n    if(events[i].segment !== 'end') { \n      svg.selectAll(`.event-${i+1}`).transition()\n        .duration(1000)\n        .style('fill','white');\n        svg.selectAll(`.event-${i+2}`).transition()\n        .duration(1000)\n        .style('fill','white');\n      }\n             \n}\n\n    \n\n// Create scrollable sections\nconst steps = d3.select('#scroll-steps')\n    .selectAll('div')\n    .data(events)\n    .enter().append('div')\n    .attr('class', 'step')\n    .text(d => d.label);\n\n// Initialize scrollama\nfunction init() {\n    setup();\n    scroller\n      .setup({\n        step: '#scrolly article .step',\n        offset: 0.98,\n        debug: false,\n      })\n      .onStepEnter(handleStepEnter)\n      .onStepExit(handleStepExit);\n\n    // Setup resize event listener\n    window.addEventListener('resize', scroller.resize);\n}\n\n// Kick things off\ninit();\n\nfor (let i = 0; i < events.length; i++) {\n  const month = events[i].date.getUTCMonth() + 1; // Months are 0-based in JavaScript\n  const day = events[i].date.getUTCDate(); // Days are 1-based\n  const id = `${month}-${day}`;\n\n  svg.select(`#day-${id}`)\n  .classed(`event-${i}`, true);\n  /*\n  console.log(`Selecting ID: ${id}`); // Debug: Print the ID being selected\n\n  const selection = svg.select(`#day-${id}`);\n  console.log(`Selection: ${selection.empty() ? 'Not Found' : 'Found'}`); // Debug: Check if selection is found\n  \n  if (!selection.empty()) {\n      selection.classed('filled-square', true); // Add the class to the element with the matching ID\n      console.log(`Class added to ID: ${id}`); // Debug: Confirm class was added\n  } else {\n      console.log(`ID not found: ${id}`); // Debug: ID not found in the selection\n  }\n  */\n}\n\n\nfunction highlightDateRange(startDate, endDate) {\n  // Ensure startDate is before endDate\n  if (startDate > endDate) {\n    [startDate, endDate] = [endDate, startDate];\n  }\n\n  // Clear previous highlights\n  svg.selectAll('rect').transition()\n  .duration(1000)\n  .style('fill','white')\n  .on('end', function() {\n    // Callback to apply new highlights after previous ones are cleared\n    let currentDate = new Date(startDate);\n    while (currentDate <= endDate) {\n      const month = currentDate.getUTCMonth() + 1;\n      const day = currentDate.getUTCDate();\n      const dayCellId = `day-${month}-${day}`;\n\n      svg.select(`#${dayCellId}`)\n        .transition()\n        .duration(1000) // Duration for highlighting\n        .style('fill', '#75aadb'); // New highlight color\n\n      currentDate.setUTCDate(currentDate.getUTCDate() + 1);\n    }\n  });\n}\n\n\nfunction transitionToMonth(newMonthIndex) {\n  console.log(\"currentMonthIndex\", currentMonthIndex);\n  console.log(\"newMonthIndex\", newMonthIndex);\n\n    // If the new month is the same as the current month, do nothing\n    if (currentMonthIndex === newMonthIndex) {\n      // Ensure the new month is visible\n      svg.select(`.calendar-month-${newMonthIndex}`)\n        .style('display', 'block')\n        .attr('transform', 'translate(0, 0)'); // Make sure it's positioned correctly\n      return;\n    }\n\n  const currentCalendar = svg.select(`.calendar-month-${currentMonthIndex}`);\n  const newCalendar = svg.select(`.calendar-month-${newMonthIndex}`);\n\n  // Calculate the vertical offset for the transition\n  const verticalOffset = height; // This should be the height of the calendar container\n\n  // Move the current month off-screen (upwards)\n  currentCalendar\n    .transition()\n    .duration(1000)\n    .attr('transform', `translate(0, ${verticalOffset})`)\n    .on('end', function() {\n      // After the transition, hide the old calendar\n      currentCalendar.style('display', 'none');\n    });\n\n  // Position the new month off-screen (downwards) and then slide it into view\n  newCalendar\n    .attr('transform', `translate(0, ${-verticalOffset})`) // Start off-screen\n    .style('display', 'block') // Ensure the new calendar is visible\n    .transition()\n    .duration(1000)\n    .attr('transform', 'translate(0, 0)'); // Slide into view\n\n  // Update the current month index\n  currentMonthIndex = newMonthIndex;\n}\n\n\nfunction transitionToMonthUp(newMonthIndex) {\n  console.log(\"currentMonthIndex\", currentMonthIndex);\n  console.log(\"newMonthIndex\", newMonthIndex);\n\n  if (currentMonthIndex === newMonthIndex) return; // No need to transition if the month is the same\n\n  const currentCalendar = svg.select(`.calendar-month-${currentMonthIndex}`);\n  const newCalendar = svg.select(`.calendar-month-${newMonthIndex}`);\n\n  // Calculate the vertical offset for the transition\n  const verticalOffset = height; // This should be the height of the calendar container\n\n  // Move the current month off-screen (upwards)\n  currentCalendar\n    .transition()\n    .duration(1000)\n    .attr('transform', `translate(0, ${-verticalOffset})`)\n    .on('end', function() {\n      // After the transition, hide the old calendar\n      currentCalendar.style('display', 'none');\n    });\n\n  // Position the new month off-screen (below the visible area) and then slide it into view\n  newCalendar\n    .attr('transform', `translate(0, ${verticalOffset})`) // Start off-screen (below the visible area)\n    .style('display', 'block') // Ensure the new calendar is visible\n    .transition()\n    .duration(1000)\n    .attr('transform', 'translate(0, 0)'); // Slide into view\n\n  // Update the current month index\n  currentMonthIndex = newMonthIndex;\n}\n"]}